# rtjvm
rtjvmDemo {
    akka.persistence.journal {
        plugin = "akka.persistence.journal.leveldb"
        leveldb.dir = "target/rtjvm/journal"
    }

    akka.persistence.snapshot-store {
        plugin = "akka.persistence.snapshot-store.local"
        local.dir = "target/rtjvm/snapshots"
    }
}

# votingDemo
votingDemo {
    akka.persistence.journal {
            plugin = "akka.persistence.journal.leveldb"
            leveldb.dir = "target/votes/journal"
        }
}

# localStores
localStores {
    akka.persistence.journal {
        plugin = "akka.persistence.journal.leveldb"
        leveldb {
            dir = "target/localStores/journal"
            compaction-intervals {
                simple-persistent-actor = 1000
                "*" = 50000
            }
        }
    }

    akka.persistence.snapshot-store {
        plugin = "akka.persistence.snapshot-store.local"
        local.dir = "target/localStores/snapshots"
    }
}

# postgresDemo
postgresDemo {
    akka.persistence.journal.plugin = "jdbc-journal"
    akka.persistence.snapshot-store.plugin = "jdbc-snapshot-store"

    akka-persistence-jdbc {
        shared-databases {
            slick {
                profile = "slick.jdbc.PostgresProfile$"
                db {
                    numThreads = 10
                    driver = "org.postgresql.Driver"
                    url = "jdbc:postgresql://localhost:5432/rtjvm"
                    user = "docker"
                    password = "docker"
                }
            }
        }
    }

    jdbc-journal {
        use-shared-db = "slick"
    }

    jdbc-snapshot-store {
        use-shared-db = "slick"
    }
}

# cassandraDemo
cassandraDemo {
    akka.persistence.journal.plugin = "cassandra-journal"
    akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

    # default values
}

# customSerializerDemo
customSerializerDemo {
    akka.persistence.journal.plugin = "cassandra-journal"
    akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

    akka.actor {
        serializers {
            java = "akka.serialization.JavaSerializer"
            rtjvm = "part3storesserialization.UserRegistrationSerializer"
        }

        serialization-bindings {
            "part3storesserialization.UserRegistered" = rtjvm
            #java serializer is used by default
        }
    }
}

# eventAdapters
eventAdapters {
    akka.persistence.journal.plugin = "cassandra-journal"
    akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

    cassandra-journal {
        event-adapters {
            guitar-inventory-enhancer = "part4practices.EventAdapters$GuitarReadEventAdapter"
        }

        event-adapter-bindings {
            "part4practices.EventAdapters$GuitarAdded" = guitar-inventory-enhancer
        }
    }
}

# detachingModels
detachingModels {
    akka.persistence.journal.plugin = "cassandra-journal"
    akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

    cassandra-journal {
        event-adapters {
            detach-adapter = "part4practices.ModelAdapter"
        }

        event-adapter-bindings {
            "part4practices.DomainModel$CouponApplied" = detach-adapter
            "part4practices.DataModel$WrittenCouponApplied" = detach-adapter
            "part4practices.DataModel$WrittenCouponAppliedV2" = detach-adapter
        }
    }
}

# persistenceQuery
persistenceQuery {
    akka.persistence.journal.plugin = "cassandra-journal"
    akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

    cassandra-journal {
        event-adapters {
            tagging = "part4practices.PersistenceQueryDemo$MusicStoreEventAdapter"
        }

        event-adapter-bindings {
            "part4practices.PersistenceQueryDemo$PlaylistPurchase" = tagging

        }
    }
}